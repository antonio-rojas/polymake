#  Copyright (c) 1997-2015
#  Ewgenij Gawrilow, Michael Joswig (Technische Universitaet Berlin, Germany)
#  http://www.polymake.org
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

CREDIT singular
  SINGULAR is a Computer Algebra System for polynomial computations with special emphasis
  on the needs of commutative algebra, algebraic geometry, and singularity theory.
  Copyright by the SINGULAR team.
  http://www.singular.uni-kl.de/

# path to the Singular executable
custom $Singular;

CONFIGURE {
   find_program($Singular, "Singular") or return;

   # check the version
   open SINGULAR_OUTPUT, "echo 'quit;' | $Singular |"
       or die "can't run $Singular: $!";
   local $/;
   my $version=<SINGULAR_OUTPUT>;
   close SINGULAR_OUTPUT;
   if ($version =~ /version\s+([\d-]+)/) {
      $version=$1;
      $version =~ tr/-/./;
      eval("v$version") ge v3.1.2
        or die <<'.';
polymake requires Singular v3.1.2 or newer;
Please download the current version
and repeat the auto-configuration.
.
   } else {
      die <<".";
Could not find version number in Singular greeting message:
  $version
Either your version is too far away from what polymake expects
(3.1.2 or newer) or Singular could not be started at all.
Please investigate the reasons
and repeat the auto-configuration.
.
   }
}

object TropicalPolytope {

# Use the algorithm of Dochtermann, Sanyal and Joswig via Singular
# which is a non-generic version of the algorithm of Block and Yu.
label singular

# the following rule is incomplete in the sense that it is possible
# to derive more information from the Singular output

# Anton Dochtermann, Michael Joswig, Raman Sanyal
#   Tropical types and associated cellular resolutions.
#   Preprint, arxiv.org/abs/1001.0237


# Block, Florian(D-MUTU-ZMG); Yu, Josephine(1-CA)
#   Tropical convexity via cellular resolutions.
#   J. Algebraic Combin. 24 (2006), no. 1, 103--114.

rule singular.pseudovertex_types : PSEUDOVERTEX_TYPES : POINTS, AMBIENT_DIM {
  my $d=$this->AMBIENT_DIM+1;
  my $m=new Matrix<Rational>($this->POINTS);
  canonicalize_to_nonnegative($m);
  my @points=@{$m};
  my $n=@points;
  my $dim= (($n<=$d)? $n : $d)-1;

  my $tempname=new Tempfile;
  open SINGULAR_FILE, ">$tempname"
    or die "can't create temporary file $tempname: $!";

  print SINGULAR_FILE << ".";
ring R = 0, (
.

  my @var_list=();
  for (my $i=0; $i<$n; ++$i) {
    for (my $j=0; $j<$d; ++$j) {
      push @var_list, "x_".$i."_".$j;
    }
  }
  my $var_string = join ",", @var_list;
  print SINGULAR_FILE << ".";
$var_string),
(wp(
.

  my $i=0;
  foreach (@points) {
    chomp;
    s/\s+/,/g;
    print SINGULAR_FILE ",\n" unless $i==0;
    print SINGULAR_FILE "$_";
    ++$i;
  }

print SINGULAR_FILE << ".";
));
matrix M[$n][$d]=
$var_string;

//2x2-minors of M
ideal J=(minor(M,2));

//initial ideal of J
def br = basering;
int n = nvars(basering);
LIB "ring.lib";
intvec wv=ringweights(basering);
LIB "tropical.lib";
ideal I=initialIdeal(J,wv);I;

// largest monomial subideal of I via Algorithm 4.4.2 
// of Saito, Sturmfels, Takayama in Groebner Deformations of Hypergeometric Differential Equations

int i,j,k;

intvec v,w;

// step 0 extend ring

list rl = ringlist(br);
intvec a=1:2*n;
rl[3][1]=list("dp",a);
for (i=1;i<=n;i++)
{
  rl[2]= insert(rl[2],"u_"+string(i),n+i-1);
}
def rnew = ring(rl);
setring rnew;

poly g,h;
ideal I_new = fetch(br,I);

// step 1 multi-homogenize

for (i=1;i<=ncols(I_new);i++)  // each ideal entry
{
  h = I_new[i];
  v = 0:2*n;

  for (k=1;k<=n;k++)   // determine multidegree
  {
    v[k] = 1;
    w[k] = deg(h,v);   // deg w.r.t. e_k
    v = 0:2*n;
  }
  // w is the multi-degree

  for(j=1;j<=size(h);j++)    // each term
  {
    v = leadexp(h[j]);
    v = 0:n,intvec(w[1..n])-intvec(v[1..n]);  // exponent vector
    g = g + h[j]*monomial(v);
  }
  I_new[i] = g;
}
I_new;
LIB "elim.lib";
option(redSB);
h = 1;
for (i=1;i<=n;i++) { h = h * var(n+i);}
I_new = sat(I_new,h)[1];

// step 3 select monomials
ideal K;

j=0;

for (i=1;i<=ncols(I_new);i++)
{
  if (size(I_new[i])==1 and deg(I_new[i])>0)
  {
    j++;
    K[j]=I_new[i];
  }
}

setring br;
ideal K = fetch(rnew,K);
simplify(K,2); // K - largest monomial subideal of I

LIB "monomialideal.lib";
//Alexander dual 
def AD=irreddecMon(K,"ad");
list l;
for (i=1;i<=size(AD);i++){poly p=1;for(j=1;j<=size(AD[i]);j++){p=p*(AD[i][j]);}l=insert(l,p);}
int s=size(AD);
ideal I_AD=l[1..s];

//resolution
resolution C=minres(res(I_AD,$dim));
print(C);


quit;
.
  close SINGULAR_FILE;

  my @pseudovertex_types=();
  open SINGULAR_OUTPUT, "$Singular $tempname|";
  local $_;
  while (<SINGULAR_OUTPUT>) {
    last if m/^\[1\]/;
  }
  while (<SINGULAR_OUTPUT>) {
    last if (m /^\[/) or (m /^Auf Wiedersehen/);
    chomp;
    my $res= s/\s+_\[(\d+)\]=//; # $1 is the index
    last unless $res;
    my @vars= split /\*/,$_;
    my @types=();
    for (my $j=0; $j<$d; ++$j) {
      push @types, [];
    }
    my $k=0;
    for (my $i=0; $i<$n; ++$i) {
      for (my $j=0; $j<$d; ++$j) {
        if ($vars[$k] eq "x_".$i."_".$j) {
          ++$k;
        } else {
          push @{$types[$j]}, $i;
        }
      }
    }
    push @pseudovertex_types, \@types;
  }
  close SINGULAR_OUTPUT;

  $this->PSEUDOVERTEX_TYPES=\@pseudovertex_types;
}
weight 4.30;
permutation : PseudoVertexPerm;

}

# Local Variables:
# mode: perl
# cperl-indent-level:3
# indent-tabs-mode:nil
# End:
