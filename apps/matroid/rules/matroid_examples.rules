#  Copyright (c) 1997-2015
#  Ewgenij Gawrilow, Michael Joswig (Technische Universitaet Berlin, Germany)
#  http://www.polymake.org
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

# @category Producing a matroid from scratch
# Create the matroid corresponding to Pappus' Theorem.  
# Realizable if and only if the size of the field is not 2,3 or 5.
# An excluded minor for the field with 5 elements.
# @return Matroid

user_function pappus_matroid() {
    return new Matroid(BASES=> [[0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 1, 6], [0, 1, 7], [0, 1, 8], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 2, 6], [0, 2, 7], [0, 2, 8], [0, 3, 4], [0, 3, 5], [0, 3, 6], [0, 3, 7], [0, 3, 8], [0, 4, 5], [0, 4, 6], [0, 4, 7], [0, 5, 6], [0, 5, 8], [0, 6, 7], [0, 6, 8], [0, 7, 8], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 2, 8], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 4, 8], [1, 5, 7], [1, 5, 8], [1, 6, 7], [1, 6, 8], [1, 7, 8], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 8], [2, 4, 5], [2, 4, 7], [2, 4, 8], [2, 5, 6], [2, 5, 7], [2, 5, 8], [2, 6, 7], [2, 6, 8], [2, 7, 8], [3, 4, 6], [3, 4, 7], [3, 4, 8], [3, 5, 6], [3, 5, 7], [3, 5, 8], [3, 6, 7], [3, 6, 8], [3, 7, 8], [4, 5, 6], [4, 5, 7], [4, 5, 8], [4, 6, 7], [4, 6, 8], [4, 7, 8], [5, 6, 7], [5, 6, 8], [5, 7, 8]], 
                       N_ELEMENTS=>9, 
                       RANK=>3);
}

# @category Producing a matroid from scratch
# Create the matroid encoding the violation of Pappus' Theorem.  Not realizable over any field.
# An excluded minor for all finite fields with more than four elements.
# Algebraic over all field that do not have characteristic 0.
# @return Matroid

user_function non_pappus_matroid() {
    return new Matroid(BASES=> [[0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 1, 6], [0, 1, 7], [0, 1, 8], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 2, 6], [0, 2, 7], [0, 2, 8], [0, 3, 4], [0, 3, 5], [0, 3, 6], [0, 3, 7], [0, 3, 8], [0, 4, 5], [0, 4, 6], [0, 4, 7], [0, 5, 6], [0, 5, 8], [0, 6, 7], [0, 6, 8], [0, 7, 8], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 2, 8], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 4, 8], [1, 5, 7], [1, 5, 8], [1, 6, 7], [1, 6, 8], [1, 7, 8], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 8], [2, 4, 5], [2, 4, 7], [2, 4, 8], [2, 5, 6], [2, 5, 7], [2, 5, 8], [2, 6, 7], [2, 6, 8], [2, 7, 8], [3, 4, 5], [3, 4, 6], [3, 4, 7], [3, 4, 8], [3, 5, 6], [3, 5, 7], [3, 5, 8], [3, 6, 7], [3, 6, 8], [3, 7, 8], [4, 5, 6], [4, 5, 7], [4, 5, 8], [4, 6, 7], [4, 6, 8], [4, 7, 8], [5, 6, 7], [5, 6, 8], [5, 7, 8]],
                       N_ELEMENTS=>9,
                       RANK=>3);
}

# @category Producing a matroid from scratch
# A regular matroid that's not graphical nor cographical.
# Algebraic over all fields.
# @return Matroid

user_function r10_matroid() {
    return new Matroid(VECTORS=> [[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1],[-1,1,0,0,1],[1,-1,1,0,0],[0,1,-1,1,0],[0,0,1,-1,1],[1,0,0,1,-1]]);
}

# @category Producing a matroid from scratch
# A smallest non-representable matroid.
# An excluded minor for all finite fields with more than four elements.
# Non-algebraic.
# @return Matroid

user_function vamos_matroid() {
    return new Matroid(BASES=> [[0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 2, 7], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 3, 7], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 5, 6], [0, 1, 5, 7], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 4, 5], [0, 2, 4, 6], [0, 2, 4, 7], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 6, 7], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 4, 7], [0, 3, 5, 6], [0, 3, 5, 7], [0, 3, 6, 7], [0, 4, 5, 6], [0, 4, 5, 7], [0, 4, 6, 7], [0, 5, 6, 7], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 6, 7], [1, 5, 6, 7], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 6, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7]],
                       N_ELEMENTS=>8,
                       RANK=>4);
}


# @category Producing a matroid from scratch
# A matroid related to the Vamos matroid (see [Oxley:matroid theory (2nd ed.) page 72])
# @return Matroid

user_function non_vamos_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 2, 7], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 3, 7], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 5, 6], [0, 1, 5, 7], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 4, 5], [0, 2, 4, 6], [0, 2, 4, 7], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 6, 7], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 4, 7], [0, 3, 5, 6], [0, 3, 5, 7], [0, 3, 6, 7], [0, 4, 5, 6], [0, 4, 5, 7], [0, 4, 6, 7], [0, 5, 6, 7], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 6, 7], [1, 5, 6, 7], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], [2, 3, 5, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7]],
                       N_ELEMENTS=>8,
                       RANK=>4);
}

# @category Producing a matroid from scratch
# The only other ternary 3-spike apart from the non-fano matroid.
# Non binary. Algebraic over all fields.
# @return Matroid
user_function p7_matroid() {
    return new Matroid(BASES=>[[0, 1, 2], [0, 1, 3], [0, 1, 5], [0, 1, 6], [0, 2, 3], [0, 2, 4], [0, 2, 6], [0, 3, 4], [0, 3, 5], [0, 4, 5], [0, 4, 6], [0, 5, 6], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], [1, 5, 6], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6], [2, 5, 6], [3, 4, 6], [3, 5, 6], [4, 5, 6]],
                       N_ELEMENTS=>7,
                       RANK=>3);
}

# @category Producing a matroid from scratch
# The repesentaion over the reals is obtained from a 3-cube where one face is rotated by 45Â°. 
# Non represetable if and only if the characeristic of the field is 2. Algebraic over all fields.
# @return Matroid
user_function p8_matroid() {
    return new Matroid(TERNARY_VECTORS=>[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1],[0,1,1,2],[1,0,1,1],[1,1,0,1],[2,1,1,0]]);
}

# @category Producing a matroid from scratch
# Obtained  from [[p8_matroid]] by relaxing its only pair of disjoint circuit-hyperplanes.  
# @return Matroid
user_function non_p8_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 2, 7], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 3, 7], [0, 1, 4, 5], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 5, 6], [0, 1, 6, 7], [0, 2, 3, 4], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 4, 5], [0, 2, 4, 6], [0, 2, 4, 7], [0, 2, 5, 6], [0, 2, 5, 7], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 5, 6], [0, 3, 5, 7], [0, 3, 6, 7], [0, 4, 5, 7], [0, 4, 6, 7], [0, 5, 6, 7], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 5, 6, 7], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 6, 7], [2, 4, 5, 6], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 6, 7], [4, 5, 6, 7]],
                       N_ELEMENTS=>8,
                       RANK=>4);
}

# @category Producing a matroid from scratch
# A excluded minor for some properties (see [Oxley:matroid theory (2nd ed.) page 650]).
# Non binary. Algebraic over all fields.
# @return Matroid
user_function j_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 7], [0, 1, 3, 4], [0, 1, 3, 6], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 6, 7], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 4, 5], [0, 2, 4, 7], [0, 2, 5, 7], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 5, 6], [0, 4, 5, 6], [0, 4, 5, 7], [0, 4, 6, 7], [0, 5, 6, 7], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 6, 7], [1, 5, 6, 7], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], [2, 3, 5, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7]],
                       N_ELEMENTS=>8,
                       RANK=>4);
}

# @category Producing a matroid from scratch
# The 4-point planes are the six faces of the cube an the two twisted plannes.
# Identically self-dual. Representable over all field with more then 4 elements and algebraic over all fields.
# @return Matroid
user_function l8_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 3, 7], [0, 1, 4, 5], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 5, 7], [0, 1, 6, 7], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 4, 5], [0, 2, 4, 7], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 6, 7], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 4, 7], [0, 3, 5, 6], [0, 3, 5, 7], [0, 3, 6, 7], [0, 4, 5, 6], [0, 4, 6, 7], [0, 5, 6, 7], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 6, 7], [1, 5, 6, 7], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 6, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7], [4, 5, 6, 7]],
                       N_ELEMENTS=>8,
                       RANK=>4);
}

# @category Producing a matroid from scratch
# An excluded minor for the dyadic matroids (see [Oxley:matroid theory (2nd ed.) page 558]).
# @return Matroid
user_function n1_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 3, 4], [0, 1, 2, 3, 5], [0, 1, 2, 3, 6], [0, 1, 2, 3, 7], [0, 1, 2, 3, 8], [0, 1, 2, 4, 7], [0, 1, 2, 4, 8], [0, 1, 2, 4, 9], [0, 1, 2, 5, 7], [0, 1, 2, 5, 8], [0, 1, 2, 5, 9], [0, 1, 2, 6, 7], [0, 1, 2, 6, 8], [0, 1, 2, 6, 9], [0, 1, 2, 7, 9], [0, 1, 2, 8, 9], [0, 1, 3, 4, 6], [0, 1, 3, 4, 7], [0, 1, 3, 4, 9], [0, 1, 3, 5, 6], [0, 1, 3, 5, 7], [0, 1, 3, 5, 9], [0, 1, 3, 6, 7], [0, 1, 3, 6, 8], [0, 1, 3, 6, 9], [0, 1, 3, 7, 8], [0, 1, 3, 7, 9], [0, 1, 3, 8, 9], [0, 1, 4, 6, 7], [0, 1, 4, 6, 8], [0, 1, 4, 6, 9], [0, 1, 4, 7, 8], [0, 1, 4, 8, 9], [0, 1, 5, 6, 7], [0, 1, 5, 6, 8], [0, 1, 5, 6, 9], [0, 1, 5, 7, 8], [0, 1, 5, 8, 9], [0, 1, 6, 7, 8], [0, 1, 6, 7, 9], [0, 1, 7, 8, 9], [0, 2, 3, 4, 5], [0, 2, 3, 4, 6], [0, 2, 3, 4, 9], [0, 2, 3, 5, 6], [0, 2, 3, 5, 7], [0, 2, 3, 5, 8], [0, 2, 3, 5, 9], [0, 2, 3, 6, 7], [0, 2, 3, 6, 8], [0, 2, 3, 6, 9], [0, 2, 3, 7, 9], [0, 2, 3, 8, 9], [0, 2, 4, 5, 7], [0, 2, 4, 5, 8], [0, 2, 4, 5, 9], [0, 2, 4, 6, 7], [0, 2, 4, 6, 8], [0, 2, 4, 6, 9], [0, 2, 4, 7, 9], [0, 2, 4, 8, 9], [0, 2, 5, 6, 7], [0, 2, 5, 6, 8], [0, 2, 5, 6, 9], [0, 2, 6, 7, 9], [0, 2, 6, 8, 9], [0, 3, 4, 5, 6], [0, 3, 4, 5, 7], [0, 3, 4, 5, 9], [0, 3, 4, 6, 7], [0, 3, 4, 6, 9], [0, 3, 4, 7, 9], [0, 3, 5, 6, 8], [0, 3, 5, 7, 8], [0, 3, 5, 8, 9], [0, 3, 6, 7, 8], [0, 3, 6, 8, 9], [0, 3, 7, 8, 9], [0, 4, 5, 6, 7], [0, 4, 5, 6, 8], [0, 4, 5, 6, 9], [0, 4, 5, 7, 8], [0, 4, 5, 8, 9], [0, 4, 6, 7, 8], [0, 4, 6, 7, 9], [0, 4, 6, 8, 9], [0, 4, 7, 8, 9], [0, 5, 6, 7, 8], [0, 5, 6, 8, 9], [0, 6, 7, 8, 9], [1, 2, 3, 4, 5], [1, 2, 3, 4, 8], [1, 2, 3, 4, 9], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], [1, 2, 3, 5, 9], [1, 2, 3, 6, 8], [1, 2, 3, 6, 9], [1, 2, 3, 7, 8], [1, 2, 3, 7, 9], [1, 2, 3, 8, 9], [1, 2, 4, 5, 7], [1, 2, 4, 5, 8], [1, 2, 4, 5, 9], [1, 2, 4, 7, 8], [1, 2, 4, 7, 9], [1, 2, 5, 6, 7], [1, 2, 5, 6, 8], [1, 2, 5, 6, 9], [1, 2, 5, 7, 8], [1, 2, 5, 7, 9], [1, 2, 5, 8, 9], [1, 2, 6, 7, 8], [1, 2, 6, 7, 9], [1, 2, 7, 8, 9], [1, 3, 4, 5, 6], [1, 3, 4, 5, 7], [1, 3, 4, 5, 9], [1, 3, 4, 6, 8], [1, 3, 4, 6, 9], [1, 3, 4, 7, 8], [1, 3, 4, 7, 9], [1, 3, 4, 8, 9], [1, 3, 5, 6, 7], [1, 3, 5, 7, 9], [1, 3, 6, 7, 8], [1, 3, 6, 7, 9], [1, 3, 7, 8, 9], [1, 4, 5, 6, 7], [1, 4, 5, 6, 8], [1, 4, 5, 6, 9], [1, 4, 5, 7, 8], [1, 4, 5, 8, 9], [1, 4, 6, 7, 8], [1, 4, 6, 7, 9], [1, 4, 7, 8, 9], [1, 5, 6, 7, 8], [1, 5, 6, 7, 9], [1, 5, 7, 8, 9], [2, 3, 4, 5, 6], [2, 3, 4, 5, 8], [2, 3, 4, 5, 9], [2, 3, 4, 6, 8], [2, 3, 4, 6, 9], [2, 3, 4, 8, 9], [2, 3, 5, 6, 7], [2, 3, 5, 6, 8], [2, 3, 5, 7, 8], [2, 3, 5, 7, 9], [2, 3, 5, 8, 9], [2, 3, 6, 7, 8], [2, 3, 6, 7, 9], [2, 3, 6, 8, 9], [2, 3, 7, 8, 9], [2, 4, 5, 6, 7], [2, 4, 5, 6, 8], [2, 4, 5, 6, 9], [2, 4, 5, 7, 8], [2, 4, 5, 7, 9], [2, 4, 5, 8, 9], [2, 4, 6, 7, 8], [2, 4, 6, 7, 9], [2, 4, 7, 8, 9], [2, 5, 6, 7, 8], [2, 5, 6, 7, 9], [2, 5, 6, 8, 9], [2, 6, 7, 8, 9], [3, 4, 5, 6, 7], [3, 4, 5, 6, 8], [3, 4, 5, 7, 8], [3, 4, 5, 7, 9], [3, 4, 5, 8, 9], [3, 4, 6, 7, 8], [3, 4, 6, 7, 9], [3, 4, 6, 8, 9], [3, 4, 7, 8, 9], [3, 5, 6, 7, 8], [3, 5, 7, 8, 9], [3, 6, 7, 8, 9], [4, 5, 6, 7, 9], [4, 5, 6, 8, 9], [4, 5, 7, 8, 9], [4, 6, 7, 8, 9], [5, 6, 7, 8, 9]],
                       N_ELEMENTS=>10,
                       RANK=>5);
}

# @category Producing a matroid from scratch
# An excluded minor for the dyadic matroids (see [Oxley:matroid theory (2nd ed.) page 558]).
# @return Matroid
user_function n2_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 6], [0, 1, 2, 3, 4, 7], [0, 1, 2, 3, 4, 8], [0, 1, 2, 3, 4, 9], [0, 1, 2, 3, 4, 11], [0, 1, 2, 3, 5, 6], [0, 1, 2, 3, 5, 10], [0, 1, 2, 3, 5, 11], [0, 1, 2, 3, 6, 7], [0, 1, 2, 3, 6, 8], [0, 1, 2, 3, 6, 9], [0, 1, 2, 3, 6, 10], [0, 1, 2, 3, 7, 10], [0, 1, 2, 3, 7, 11], [0, 1, 2, 3, 8, 10], [0, 1, 2, 3, 8, 11], [0, 1, 2, 3, 9, 10], [0, 1, 2, 3, 9, 11], [0, 1, 2, 3, 10, 11], [0, 1, 2, 4, 5, 8], [0, 1, 2, 4, 5, 9], [0, 1, 2, 4, 5, 10], [0, 1, 2, 4, 6, 8], [0, 1, 2, 4, 6, 9], [0, 1, 2, 4, 6, 10], [0, 1, 2, 4, 7, 8], [0, 1, 2, 4, 7, 9], [0, 1, 2, 4, 7, 10], [0, 1, 2, 4, 8, 10], [0, 1, 2, 4, 8, 11], [0, 1, 2, 4, 9, 10], [0, 1, 2, 4, 9, 11], [0, 1, 2, 4, 10, 11], [0, 1, 2, 5, 6, 8], [0, 1, 2, 5, 6, 9], [0, 1, 2, 5, 6, 10], [0, 1, 2, 5, 8, 10], [0, 1, 2, 5, 8, 11], [0, 1, 2, 5, 9, 10], [0, 1, 2, 5, 9, 11], [0, 1, 2, 5, 10, 11], [0, 1, 2, 6, 7, 8], [0, 1, 2, 6, 7, 9], [0, 1, 2, 6, 7, 10], [0, 1, 2, 7, 8, 10], [0, 1, 2, 7, 8, 11], [0, 1, 2, 7, 9, 10], [0, 1, 2, 7, 9, 11], [0, 1, 2, 7, 10, 11], [0, 1, 3, 4, 5, 7], [0, 1, 3, 4, 5, 8], [0, 1, 3, 4, 5, 11], [0, 1, 3, 4, 6, 7], [0, 1, 3, 4, 6, 8], [0, 1, 3, 4, 6, 11], [0, 1, 3, 4, 7, 8], [0, 1, 3, 4, 7, 9], [0, 1, 3, 4, 7, 11], [0, 1, 3, 4, 8, 9], [0, 1, 3, 4, 9, 11], [0, 1, 3, 5, 6, 7], [0, 1, 3, 5, 6, 8], [0, 1, 3, 5, 6, 11], [0, 1, 3, 5, 7, 10], [0, 1, 3, 5, 7, 11], [0, 1, 3, 5, 8, 10], [0, 1, 3, 5, 8, 11], [0, 1, 3, 5, 10, 11], [0, 1, 3, 6, 7, 8], [0, 1, 3, 6, 7, 9], [0, 1, 3, 6, 7, 10], [0, 1, 3, 6, 7, 11], [0, 1, 3, 6, 8, 9], [0, 1, 3, 6, 8, 10], [0, 1, 3, 6, 8, 11], [0, 1, 3, 6, 9, 11], [0, 1, 3, 6, 10, 11], [0, 1, 3, 7, 8, 10], [0, 1, 3, 7, 8, 11], [0, 1, 3, 7, 9, 10], [0, 1, 3, 7, 9, 11], [0, 1, 3, 7, 10, 11], [0, 1, 3, 8, 9, 10], [0, 1, 3, 8, 9, 11], [0, 1, 3, 9, 10, 11], [0, 1, 4, 5, 7, 8], [0, 1, 4, 5, 7, 9], [0, 1, 4, 5, 7, 10], [0, 1, 4, 5, 8, 9], [0, 1, 4, 5, 8, 10], [0, 1, 4, 5, 8, 11], [0, 1, 4, 5, 9, 11], [0, 1, 4, 5, 10, 11], [0, 1, 4, 6, 7, 8], [0, 1, 4, 6, 7, 9], [0, 1, 4, 6, 7, 10], [0, 1, 4, 6, 8, 9], [0, 1, 4, 6, 8, 10], [0, 1, 4, 6, 8, 11], [0, 1, 4, 6, 9, 11], [0, 1, 4, 6, 10, 11], [0, 1, 4, 7, 8, 9], [0, 1, 4, 7, 8, 10], [0, 1, 4, 7, 8, 11], [0, 1, 4, 7, 9, 10], [0, 1, 4, 7, 9, 11], [0, 1, 4, 7, 10, 11], [0, 1, 4, 8, 9, 10], [0, 1, 4, 8, 9, 11], [0, 1, 4, 9, 10, 11], [0, 1, 5, 6, 7, 8], [0, 1, 5, 6, 7, 9], [0, 1, 5, 6, 7, 10], [0, 1, 5, 6, 8, 9], [0, 1, 5, 6, 8, 10], [0, 1, 5, 6, 8, 11], [0, 1, 5, 6, 9, 11], [0, 1, 5, 6, 10, 11], [0, 1, 5, 7, 8, 10], [0, 1, 5, 7, 8, 11], [0, 1, 5, 7, 9, 10], [0, 1, 5, 7, 9, 11], [0, 1, 5, 7, 10, 11], [0, 1, 5, 8, 9, 10], [0, 1, 5, 8, 9, 11], [0, 1, 5, 9, 10, 11], [0, 1, 6, 7, 8, 9], [0, 1, 6, 7, 8, 10], [0, 1, 6, 7, 8, 11], [0, 1, 6, 7, 9, 11], [0, 1, 6, 7, 10, 11], [0, 1, 7, 8, 9, 10], [0, 1, 7, 8, 9, 11], [0, 1, 7, 9, 10, 11], [0, 2, 3, 4, 5, 6], [0, 2, 3, 4, 5, 7], [0, 2, 3, 4, 5, 11], [0, 2, 3, 4, 6, 8], [0, 2, 3, 4, 6, 9], [0, 2, 3, 4, 7, 8], [0, 2, 3, 4, 7, 9], [0, 2, 3, 4, 8, 11], [0, 2, 3, 4, 9, 11], [0, 2, 3, 5, 6, 7], [0, 2, 3, 5, 6, 10], [0, 2, 3, 5, 7, 10], [0, 2, 3, 5, 7, 11], [0, 2, 3, 5, 10, 11], [0, 2, 3, 6, 7, 8], [0, 2, 3, 6, 7, 9], [0, 2, 3, 6, 8, 10], [0, 2, 3, 6, 9, 10], [0, 2, 3, 7, 8, 10], [0, 2, 3, 7, 8, 11], [0, 2, 3, 7, 9, 10], [0, 2, 3, 7, 9, 11], [0, 2, 3, 8, 10, 11], [0, 2, 3, 9, 10, 11], [0, 2, 4, 5, 6, 8], [0, 2, 4, 5, 6, 9], [0, 2, 4, 5, 6, 10], [0, 2, 4, 5, 7, 8], [0, 2, 4, 5, 7, 9], [0, 2, 4, 5, 7, 10], [0, 2, 4, 5, 8, 11], [0, 2, 4, 5, 9, 11], [0, 2, 4, 5, 10, 11], [0, 2, 4, 6, 8, 10], [0, 2, 4, 6, 9, 10], [0, 2, 4, 7, 8, 10], [0, 2, 4, 7, 9, 10], [0, 2, 4, 8, 10, 11], [0, 2, 4, 9, 10, 11], [0, 2, 5, 6, 7, 8], [0, 2, 5, 6, 7, 9], [0, 2, 5, 6, 7, 10], [0, 2, 5, 6, 8, 10], [0, 2, 5, 6, 9, 10], [0, 2, 5, 7, 8, 10], [0, 2, 5, 7, 8, 11], [0, 2, 5, 7, 9, 10], [0, 2, 5, 7, 9, 11], [0, 2, 5, 7, 10, 11], [0, 2, 5, 8, 10, 11], [0, 2, 5, 9, 10, 11], [0, 2, 6, 7, 8, 10], [0, 2, 6, 7, 9, 10], [0, 2, 7, 8, 10, 11], [0, 2, 7, 9, 10, 11], [0, 3, 4, 5, 6, 7], [0, 3, 4, 5, 6, 8], [0, 3, 4, 5, 6, 11], [0, 3, 4, 5, 7, 8], [0, 3, 4, 5, 7, 11], [0, 3, 4, 5, 8, 11], [0, 3, 4, 6, 7, 8], [0, 3, 4, 6, 7, 9], [0, 3, 4, 6, 8, 9], [0, 3, 4, 6, 8, 11], [0, 3, 4, 6, 9, 11], [0, 3, 4, 7, 8, 9], [0, 3, 4, 7, 8, 11], [0, 3, 4, 7, 9, 11], [0, 3, 4, 8, 9, 11], [0, 3, 5, 6, 7, 8], [0, 3, 5, 6, 7, 10], [0, 3, 5, 6, 7, 11], [0, 3, 5, 6, 8, 10], [0, 3, 5, 6, 10, 11], [0, 3, 5, 7, 8, 10], [0, 3, 5, 7, 8, 11], [0, 3, 5, 7, 10, 11], [0, 3, 5, 8, 10, 11], [0, 3, 6, 7, 8, 9], [0, 3, 6, 7, 8, 10], [0, 3, 6, 7, 8, 11], [0, 3, 6, 7, 9, 10], [0, 3, 6, 7, 9, 11], [0, 3, 6, 8, 9, 10], [0, 3, 6, 8, 10, 11], [0, 3, 6, 9, 10, 11], [0, 3, 7, 8, 9, 10], [0, 3, 7, 8, 9, 11], [0, 3, 7, 8, 10, 11], [0, 3, 7, 9, 10, 11], [0, 3, 8, 9, 10, 11], [0, 4, 5, 6, 7, 8], [0, 4, 5, 6, 7, 9], [0, 4, 5, 6, 7, 10], [0, 4, 5, 6, 8, 9], [0, 4, 5, 6, 8, 10], [0, 4, 5, 6, 8, 11], [0, 4, 5, 6, 9, 11], [0, 4, 5, 6, 10, 11], [0, 4, 5, 7, 8, 9], [0, 4, 5, 7, 8, 10], [0, 4, 5, 7, 8, 11], [0, 4, 5, 7, 9, 11], [0, 4, 5, 7, 10, 11], [0, 4, 5, 8, 9, 11], [0, 4, 5, 8, 10, 11], [0, 4, 6, 7, 8, 10], [0, 4, 6, 7, 9, 10], [0, 4, 6, 8, 9, 10], [0, 4, 6, 8, 10, 11], [0, 4, 6, 9, 10, 11], [0, 4, 7, 8, 9, 10], [0, 4, 7, 8, 10, 11], [0, 4, 7, 9, 10, 11], [0, 4, 8, 9, 10, 11], [0, 5, 6, 7, 8, 9], [0, 5, 6, 7, 8, 11], [0, 5, 6, 7, 9, 10], [0, 5, 6, 7, 9, 11], [0, 5, 6, 7, 10, 11], [0, 5, 6, 8, 9, 10], [0, 5, 6, 8, 10, 11], [0, 5, 6, 9, 10, 11], [0, 5, 7, 8, 9, 10], [0, 5, 7, 8, 9, 11], [0, 5, 7, 8, 10, 11], [0, 5, 7, 9, 10, 11], [0, 5, 8, 9, 10, 11], [0, 6, 7, 8, 9, 10], [0, 6, 7, 8, 10, 11], [0, 6, 7, 9, 10, 11], [0, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 9], [1, 2, 3, 4, 5, 10], [1, 2, 3, 4, 5, 11], [1, 2, 3, 4, 6, 7], [1, 2, 3, 4, 6, 8], [1, 2, 3, 4, 6, 9], [1, 2, 3, 4, 6, 10], [1, 2, 3, 4, 6, 11], [1, 2, 3, 4, 7, 9], [1, 2, 3, 4, 7, 10], [1, 2, 3, 4, 7, 11], [1, 2, 3, 4, 8, 9], [1, 2, 3, 4, 8, 10], [1, 2, 3, 4, 8, 11], [1, 2, 3, 4, 9, 10], [1, 2, 3, 4, 10, 11], [1, 2, 3, 5, 6, 9], [1, 2, 3, 5, 6, 10], [1, 2, 3, 5, 6, 11], [1, 2, 3, 5, 9, 10], [1, 2, 3, 5, 9, 11], [1, 2, 3, 6, 7, 9], [1, 2, 3, 6, 7, 10], [1, 2, 3, 6, 7, 11], [1, 2, 3, 6, 8, 9], [1, 2, 3, 6, 8, 10], [1, 2, 3, 6, 8, 11], [1, 2, 3, 6, 9, 11], [1, 2, 3, 6, 10, 11], [1, 2, 3, 7, 9, 10], [1, 2, 3, 7, 9, 11], [1, 2, 3, 8, 9, 10], [1, 2, 3, 8, 9, 11], [1, 2, 3, 9, 10, 11], [1, 2, 4, 5, 6, 8], [1, 2, 4, 5, 6, 9], [1, 2, 4, 5, 6, 10], [1, 2, 4, 5, 8, 9], [1, 2, 4, 5, 8, 10], [1, 2, 4, 5, 8, 11], [1, 2, 4, 5, 9, 10], [1, 2, 4, 5, 9, 11], [1, 2, 4, 5, 10, 11], [1, 2, 4, 6, 7, 8], [1, 2, 4, 6, 7, 9], [1, 2, 4, 6, 7, 10], [1, 2, 4, 6, 8, 9], [1, 2, 4, 6, 8, 10], [1, 2, 4, 6, 8, 11], [1, 2, 4, 6, 9, 11], [1, 2, 4, 6, 10, 11], [1, 2, 4, 7, 8, 9], [1, 2, 4, 7, 8, 10], [1, 2, 4, 7, 8, 11], [1, 2, 4, 7, 9, 10], [1, 2, 4, 7, 9, 11], [1, 2, 4, 7, 10, 11], [1, 2, 4, 8, 9, 10], [1, 2, 4, 8, 9, 11], [1, 2, 4, 9, 10, 11], [1, 2, 5, 6, 8, 9], [1, 2, 5, 6, 8, 10], [1, 2, 5, 6, 8, 11], [1, 2, 5, 6, 9, 11], [1, 2, 5, 6, 10, 11], [1, 2, 5, 8, 9, 10], [1, 2, 5, 8, 9, 11], [1, 2, 5, 9, 10, 11], [1, 2, 6, 7, 8, 9], [1, 2, 6, 7, 8, 10], [1, 2, 6, 7, 8, 11], [1, 2, 6, 7, 9, 11], [1, 2, 6, 7, 10, 11], [1, 2, 7, 8, 9, 10], [1, 2, 7, 8, 9, 11], [1, 2, 7, 9, 10, 11], [1, 3, 4, 5, 6, 7], [1, 3, 4, 5, 6, 8], [1, 3, 4, 5, 6, 11], [1, 3, 4, 5, 7, 9], [1, 3, 4, 5, 7, 10], [1, 3, 4, 5, 7, 11], [1, 3, 4, 5, 8, 9], [1, 3, 4, 5, 8, 10], [1, 3, 4, 5, 8, 11], [1, 3, 4, 5, 9, 11], [1, 3, 4, 5, 10, 11], [1, 3, 4, 6, 7, 8], [1, 3, 4, 6, 7, 9], [1, 3, 4, 6, 7, 10], [1, 3, 4, 6, 8, 9], [1, 3, 4, 6, 8, 10], [1, 3, 4, 6, 8, 11], [1, 3, 4, 6, 9, 11], [1, 3, 4, 6, 10, 11], [1, 3, 4, 7, 8, 9], [1, 3, 4, 7, 8, 10], [1, 3, 4, 7, 8, 11], [1, 3, 4, 7, 9, 10], [1, 3, 4, 7, 9, 11], [1, 3, 4, 7, 10, 11], [1, 3, 4, 8, 9, 10], [1, 3, 4, 8, 9, 11], [1, 3, 4, 9, 10, 11], [1, 3, 5, 6, 7, 9], [1, 3, 5, 6, 7, 10], [1, 3, 5, 6, 7, 11], [1, 3, 5, 6, 8, 9], [1, 3, 5, 6, 8, 10], [1, 3, 5, 6, 8, 11], [1, 3, 5, 6, 9, 11], [1, 3, 5, 6, 10, 11], [1, 3, 5, 7, 9, 10], [1, 3, 5, 7, 9, 11], [1, 3, 5, 8, 9, 10], [1, 3, 5, 8, 9, 11], [1, 3, 5, 9, 10, 11], [1, 3, 6, 7, 8, 9], [1, 3, 6, 7, 8, 10], [1, 3, 6, 7, 8, 11], [1, 3, 6, 7, 9, 11], [1, 3, 6, 7, 10, 11], [1, 3, 7, 8, 9, 10], [1, 3, 7, 8, 9, 11], [1, 3, 7, 9, 10, 11], [1, 4, 5, 6, 7, 8], [1, 4, 5, 6, 7, 9], [1, 4, 5, 6, 7, 10], [1, 4, 5, 6, 8, 9], [1, 4, 5, 6, 8, 10], [1, 4, 5, 6, 8, 11], [1, 4, 5, 6, 9, 11], [1, 4, 5, 6, 10, 11], [1, 4, 5, 7, 8, 9], [1, 4, 5, 7, 8, 10], [1, 4, 5, 7, 8, 11], [1, 4, 5, 7, 9, 10], [1, 4, 5, 7, 9, 11], [1, 4, 5, 7, 10, 11], [1, 4, 5, 8, 9, 10], [1, 4, 5, 8, 9, 11], [1, 4, 5, 9, 10, 11], [1, 5, 6, 7, 8, 9], [1, 5, 6, 7, 8, 10], [1, 5, 6, 7, 8, 11], [1, 5, 6, 7, 9, 11], [1, 5, 6, 7, 10, 11], [1, 5, 7, 8, 9, 10], [1, 5, 7, 8, 9, 11], [1, 5, 7, 9, 10, 11], [2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 9], [2, 3, 4, 5, 6, 10], [2, 3, 4, 5, 6, 11], [2, 3, 4, 5, 7, 9], [2, 3, 4, 5, 7, 10], [2, 3, 4, 5, 7, 11], [2, 3, 4, 5, 9, 11], [2, 3, 4, 5, 10, 11], [2, 3, 4, 6, 7, 8], [2, 3, 4, 6, 7, 9], [2, 3, 4, 6, 8, 9], [2, 3, 4, 6, 8, 10], [2, 3, 4, 6, 8, 11], [2, 3, 4, 6, 9, 10], [2, 3, 4, 6, 9, 11], [2, 3, 4, 7, 8, 9], [2, 3, 4, 7, 8, 10], [2, 3, 4, 7, 8, 11], [2, 3, 4, 7, 9, 10], [2, 3, 4, 7, 9, 11], [2, 3, 4, 8, 9, 11], [2, 3, 4, 8, 10, 11], [2, 3, 4, 9, 10, 11], [2, 3, 5, 6, 7, 9], [2, 3, 5, 6, 7, 10], [2, 3, 5, 6, 7, 11], [2, 3, 5, 6, 9, 10], [2, 3, 5, 6, 10, 11], [2, 3, 5, 7, 9, 10], [2, 3, 5, 7, 9, 11], [2, 3, 5, 9, 10, 11], [2, 3, 6, 7, 8, 9], [2, 3, 6, 7, 8, 10], [2, 3, 6, 7, 8, 11], [2, 3, 6, 7, 9, 10], [2, 3, 6, 7, 9, 11], [2, 3, 6, 8, 9, 10], [2, 3, 6, 8, 10, 11], [2, 3, 6, 9, 10, 11], [2, 3, 7, 8, 9, 10], [2, 3, 7, 8, 9, 11], [2, 3, 8, 9, 10, 11], [2, 4, 5, 6, 7, 8], [2, 4, 5, 6, 7, 9], [2, 4, 5, 6, 7, 10], [2, 4, 5, 6, 8, 9], [2, 4, 5, 6, 8, 10], [2, 4, 5, 6, 8, 11], [2, 4, 5, 6, 9, 10], [2, 4, 5, 6, 9, 11], [2, 4, 5, 6, 10, 11], [2, 4, 5, 7, 8, 9], [2, 4, 5, 7, 8, 10], [2, 4, 5, 7, 8, 11], [2, 4, 5, 7, 9, 10], [2, 4, 5, 7, 9, 11], [2, 4, 5, 7, 10, 11], [2, 4, 5, 8, 9, 11], [2, 4, 5, 8, 10, 11], [2, 4, 5, 9, 10, 11], [2, 4, 6, 7, 8, 10], [2, 4, 6, 7, 9, 10], [2, 4, 6, 8, 9, 10], [2, 4, 6, 8, 10, 11], [2, 4, 6, 9, 10, 11], [2, 4, 7, 8, 9, 10], [2, 4, 7, 8, 10, 11], [2, 4, 7, 9, 10, 11], [2, 4, 8, 9, 10, 11], [2, 5, 6, 7, 8, 9], [2, 5, 6, 7, 8, 10], [2, 5, 6, 7, 8, 11], [2, 5, 6, 7, 9, 11], [2, 5, 6, 7, 10, 11], [2, 5, 6, 8, 9, 10], [2, 5, 6, 8, 10, 11], [2, 5, 6, 9, 10, 11], [2, 5, 7, 8, 9, 10], [2, 5, 7, 8, 9, 11], [2, 5, 7, 9, 10, 11], [2, 5, 8, 9, 10, 11], [2, 6, 7, 8, 9, 10], [2, 6, 7, 8, 10, 11], [2, 6, 7, 9, 10, 11], [2, 7, 8, 9, 10, 11], [3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 9], [3, 4, 5, 6, 7, 10], [3, 4, 5, 6, 8, 9], [3, 4, 5, 6, 8, 10], [3, 4, 5, 6, 8, 11], [3, 4, 5, 6, 9, 11], [3, 4, 5, 6, 10, 11], [3, 4, 5, 7, 8, 9], [3, 4, 5, 7, 8, 10], [3, 4, 5, 7, 8, 11], [3, 4, 5, 7, 9, 11], [3, 4, 5, 7, 10, 11], [3, 4, 5, 8, 9, 11], [3, 4, 5, 8, 10, 11], [3, 4, 6, 7, 8, 10], [3, 4, 6, 7, 9, 10], [3, 4, 6, 8, 9, 10], [3, 4, 6, 8, 10, 11], [3, 4, 6, 9, 10, 11], [3, 4, 7, 8, 9, 10], [3, 4, 7, 8, 10, 11], [3, 4, 7, 9, 10, 11], [3, 4, 8, 9, 10, 11], [3, 5, 6, 7, 8, 9], [3, 5, 6, 7, 8, 10], [3, 5, 6, 7, 8, 11], [3, 5, 6, 7, 9, 10], [3, 5, 6, 7, 9, 11], [3, 5, 6, 7, 10, 11], [3, 5, 6, 8, 9, 10], [3, 5, 6, 8, 10, 11], [3, 5, 6, 9, 10, 11], [3, 5, 7, 8, 9, 10], [3, 5, 7, 8, 9, 11], [3, 5, 7, 9, 10, 11], [3, 5, 8, 9, 10, 11], [3, 6, 7, 8, 9, 10], [3, 6, 7, 8, 10, 11], [3, 6, 7, 9, 10, 11], [3, 7, 8, 9, 10, 11], [4, 5, 6, 7, 8, 10], [4, 5, 6, 7, 9, 10], [4, 5, 6, 8, 9, 10], [4, 5, 6, 8, 10, 11], [4, 5, 6, 9, 10, 11], [4, 5, 7, 8, 9, 10], [4, 5, 7, 8, 10, 11], [4, 5, 7, 9, 10, 11], [4, 5, 8, 9, 10, 11], [5, 6, 7, 8, 9, 10], [5, 6, 7, 8, 10, 11], [5, 6, 7, 9, 10, 11], [5, 7, 8, 9, 10, 11]],
                       N_ELEMENTS=>12,
                       RANK=>6);
}

# @category Producing a matroid from scratch
# The complement of the rank-3 whirl in PG(2,3).
# Non binary. Algebraic over all fields.
# @return Matroid
user_function o7_matroid() {
    return new Matroid(BASES=>[[0, 1, 2], [0, 1, 3], [0, 1, 5], [0, 2, 4], [0, 2, 5], [0, 2, 6], [0, 3, 4], [0, 3, 5], [0, 3, 6], [0, 4, 5], [0, 5, 6], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 3, 4], [1, 3, 6], [1, 4, 5], [1, 5, 6], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6], [3, 4, 5], [3, 4, 6], [3, 5, 6], [4, 5, 6]],
                       N_ELEMENTS=>7,
                       RANK=>3);
}

# @category Producing a matroid from scratch
# Configuration of all points in the affine 3-space AG(3,2) or the binary affine cube. 
# @return Matroid
user_function ag32_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 2, 7], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 3, 7], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 5, 6], [0, 1, 5, 7], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 4, 5], [0, 2, 4, 6], [0, 2, 5, 7], [0, 2, 6, 7], [0, 3, 4, 5], [0, 3, 4, 7], [0, 3, 5, 6], [0, 3, 6, 7], [0, 4, 5, 6], [0, 4, 5, 7], [0, 4, 6, 7], [0, 5, 6, 7], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 6, 7], [1, 5, 6, 7], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], [2, 3, 5, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7]],
                       N_ELEMENTS=>8,
                       RANK=>4);
}

# @category Producing a matroid from scratch
# The unique relaxation of [[ag32_matroid]].
# @return Matroid
user_function ag32_prime_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 3, 7], [0, 1, 4, 5], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 5, 7], [0, 1, 6, 7], [0, 2, 3, 4], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 4, 5], [0, 2, 4, 7], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 6, 7], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 4, 7], [0, 3, 5, 6], [0, 3, 5, 7], [0, 4, 5, 6], [0, 4, 6, 7], [0, 5, 6, 7], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 7], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 5, 6, 7], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 6, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7], [4, 5, 6, 7]],
                       N_ELEMENTS=>8,
                       RANK=>4);
}

# @category Producing a matroid from scratch
# The real affine cube.
# @return Matroid
user_function r8_matroid() {
    return new Matroid(VECTORS=> [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1],[-1,1,1,1],[1,-1,1,1],[1,1,-1,1],[1,1,1,-1]]);
}

# @category Producing a matroid from scratch
# A smallest non-represtable matroid.
# Non-algebraic.
# @return Matroid
user_function f8_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 3, 7], [0, 1, 4, 5], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 5, 7], [0, 1, 6, 7], [0, 2, 3, 4], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 4, 5], [0, 2, 4, 7], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 6, 7], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 4, 7], [0, 3, 5, 6], [0, 3, 5, 7], [0, 4, 5, 6], [0, 4, 6, 7], [0, 5, 6, 7], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 7], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 6, 7], [1, 5, 6, 7], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 6, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7], [4, 5, 6, 7]],
                       N_ELEMENTS=>8,
                       RANK=>4);
}

# @category Producing a matroid from scratch
# A smallest non-represtable matroid.
# A excluded minor for fields that are not of characteristic 2 or have 3 elements.  Non-algebraic.
# @return Matroid
user_function q8_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 3, 7], [0, 1, 4, 5], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 5, 7], [0, 1, 6, 7], [0, 2, 3, 4], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 4, 5], [0, 2, 4, 6], [0, 2, 4, 7], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 6, 7], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 4, 7], [0, 3, 5, 6], [0, 3, 5, 7], [0, 4, 5, 6], [0, 4, 6, 7], [0, 5, 6, 7], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 7], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 6, 7], [1, 5, 6, 7], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 6, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7], [4, 5, 6, 7]],
                       N_ELEMENTS=>8,
                       RANK=>4);
}

# @category Producing a matroid from scratch
# Represtable if and only if the field has characteristic 3.
# A excluded minor for fields that are not of characteristic 2 or 3.
# @return Matroid
user_function t8_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 3, 7], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 5, 6], [0, 1, 5, 7], [0, 1, 6, 7], [0, 2, 3, 4], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 4, 5], [0, 2, 4, 7], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 6, 7], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 5, 6], [0, 3, 5, 7], [0, 3, 6, 7], [0, 4, 5, 6], [0, 4, 5, 7], [0, 4, 6, 7], [0, 5, 6, 7], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 6, 7], [1, 5, 6, 7], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], [2, 3, 5, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7]],
                       N_ELEMENTS=>8,
                       RANK=>4);
}

# @category Producing a matroid from scratch
# The rank-4 wheel.
# @return Matroid
user_function wheel4_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 3], [0, 1, 2, 6], [0, 1, 2, 7], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 5, 6], [0, 1, 5, 7], [0, 1, 6, 7], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 4, 6], [0, 2, 4, 7], [0, 2, 5, 6], [0, 2, 5, 7], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 5, 6], [0, 4, 5, 6], [0, 4, 5, 7], [0, 4, 6, 7], [0, 5, 6, 7], [1, 2, 3, 4], [1, 2, 3, 7], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 6, 7], [1, 5, 6, 7], [2, 3, 4, 5], [2, 3, 4, 7], [2, 3, 5, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7]],
                       N_ELEMENTS=>8,
                       RANK=>4);
}

# @category Producing a matroid from scratch
# Configuration of the 9 points in the affine plane AG(2,3).
# @return Matroid
user_function ag23_matroid() {
    return new Matroid(BASES=>[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 1, 6], [0, 1, 7], [0, 2, 3], [0, 2, 5], [0, 2, 6], [0, 2, 7], [0, 2, 8], [0, 3, 4], [0, 3, 5], [0, 3, 7], [0, 3, 8], [0, 4, 5], [0, 4, 6], [0, 4, 7], [0, 4, 8], [0, 5, 6], [0, 5, 8], [0, 6, 7], [0, 6, 8], [0, 7, 8], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 8], [1, 3, 4], [1, 3, 6], [1, 3, 7], [1, 3, 8], [1, 4, 5], [1, 4, 7], [1, 4, 8], [1, 5, 6], [1, 5, 7], [1, 5, 8], [1, 6, 7], [1, 6, 8], [1, 7, 8], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 7], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 4, 8], [2, 5, 7], [2, 5, 8], [2, 6, 7], [2, 6, 8], [2, 7, 8], [3, 4, 5], [3, 4, 6], [3, 4, 8], [3, 5, 6], [3, 5, 7], [3, 5, 8], [3, 6, 7], [3, 6, 8], [3, 7, 8], [4, 5, 6], [4, 5, 7], [4, 6, 7], [4, 6, 8], [4, 7, 8], [5, 6, 7], [5, 6, 8], [5, 7, 8]],
                       N_ELEMENTS=>9,
                       RANK=>3);
}

# @category Producing a matroid from scratch
# @return Matroid
user_function q3_gf3_star_matroid() {
    return new Matroid(BASES=>[[0, 1, 2], [0, 1, 5], [0, 1, 6], [0, 1, 7], [0, 1, 8], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 2, 6], [0, 3, 5], [0, 3, 6], [0, 3, 7], [0, 3, 8], [0, 4, 5], [0, 4, 6], [0, 4, 7], [0, 4, 8], [0, 5, 6], [0, 5, 7], [0, 5, 8], [0, 6, 7], [0, 6, 8], [1, 2, 3], [1, 2, 4], [1, 2, 7], [1, 2, 8], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 3, 8], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 4, 8], [1, 5, 7], [1, 5, 8], [1, 6, 7], [1, 6, 8], [1, 7, 8], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 7], [2, 3, 8], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 4, 8], [2, 5, 7], [2, 5, 8], [2, 6, 7], [2, 6, 8], [3, 4, 5], [3, 4, 6], [3, 4, 7], [3, 4, 8], [3, 5, 6], [3, 5, 8], [3, 6, 7], [3, 7, 8], [4, 5, 6], [4, 5, 7], [4, 6, 8], [4, 7, 8], [5, 6, 7], [5, 6, 8], [5, 7, 8], [6, 7, 8]],
                       N_ELEMENTS=>9,
                       RANK=>3);
}

# @category Producing a matroid from scratch
# @return Matroid
user_function r9a_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 2, 8], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 3, 7], [0, 1, 3, 8], [0, 1, 4, 5], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 4, 8], [0, 1, 5, 6], [0, 1, 5, 7], [0, 1, 6, 7], [0, 1, 6, 8], [0, 1, 7, 8], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 4, 5], [0, 2, 4, 7], [0, 2, 4, 8], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 5, 8], [0, 2, 6, 7], [0, 2, 6, 8], [0, 2, 7, 8], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 4, 7], [0, 3, 4, 8], [0, 3, 5, 6], [0, 3, 5, 7], [0, 3, 5, 8], [0, 3, 6, 8], [0, 3, 7, 8], [0, 4, 5, 6], [0, 4, 5, 8], [0, 4, 6, 7], [0, 4, 6, 8], [0, 4, 7, 8], [0, 5, 6, 7], [0, 5, 6, 8], [0, 5, 7, 8], [0, 6, 7, 8], [1, 2, 3, 4], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 3, 8], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 4, 8], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 5, 8], [1, 2, 6, 7], [1, 2, 6, 8], [1, 2, 7, 8], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 4, 8], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 5, 8], [1, 3, 6, 7], [1, 3, 6, 8], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 5, 8], [1, 4, 6, 7], [1, 4, 7, 8], [1, 5, 6, 7], [1, 5, 6, 8], [1, 5, 7, 8], [1, 6, 7, 8], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 4, 8], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 5, 8], [2, 3, 6, 7], [2, 3, 6, 8], [2, 3, 7, 8], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 5, 8], [2, 4, 6, 7], [2, 4, 6, 8], [2, 5, 6, 7], [2, 5, 6, 8], [2, 5, 7, 8], [2, 6, 7, 8], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 6, 7], [3, 4, 6, 8], [3, 4, 7, 8], [3, 5, 6, 7], [3, 5, 6, 8], [3, 5, 7, 8], [3, 6, 7, 8], [4, 5, 6, 7], [4, 5, 6, 8], [4, 5, 7, 8], [4, 6, 7, 8]],
                       N_ELEMENTS=>9,
                       RANK=>4);
}

# @category Producing a matroid from scratch
# @return Matroid
user_function r9b_matroid() {
    return new Matroid(BASES=>[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 2, 8], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 3, 7], [0, 1, 3, 8], [0, 1, 4, 5], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 4, 8], [0, 1, 5, 6], [0, 1, 5, 7], [0, 1, 5, 8], [0, 1, 6, 7], [0, 1, 7, 8], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 3, 8], [0, 2, 4, 5], [0, 2, 4, 7], [0, 2, 4, 8], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 5, 8], [0, 2, 6, 7], [0, 2, 6, 8], [0, 2, 7, 8], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 4, 7], [0, 3, 4, 8], [0, 3, 5, 6], [0, 3, 5, 7], [0, 3, 6, 7], [0, 3, 6, 8], [0, 3, 7, 8], [0, 4, 5, 6], [0, 4, 5, 7], [0, 4, 5, 8], [0, 4, 6, 7], [0, 4, 6, 8], [0, 5, 6, 7], [0, 5, 6, 8], [0, 5, 7, 8], [0, 6, 7, 8], [1, 2, 3, 4], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 3, 8], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 5, 8], [1, 2, 6, 7], [1, 2, 6, 8], [1, 2, 7, 8], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 4, 8], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 5, 8], [1, 3, 6, 7], [1, 3, 6, 8], [1, 4, 5, 6], [1, 4, 5, 8], [1, 4, 6, 7], [1, 4, 6, 8], [1, 4, 7, 8], [1, 5, 6, 7], [1, 5, 6, 8], [1, 5, 7, 8], [1, 6, 7, 8], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 4, 8], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 5, 8], [2, 3, 6, 8], [2, 3, 7, 8], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 5, 8], [2, 4, 6, 7], [2, 4, 6, 8], [2, 4, 7, 8], [2, 5, 6, 7], [2, 5, 6, 8], [2, 5, 7, 8], [2, 6, 7, 8], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 5, 8], [3, 4, 6, 7], [3, 4, 7, 8], [3, 5, 6, 7], [3, 5, 6, 8], [3, 5, 7, 8], [3, 6, 7, 8], [4, 5, 6, 7], [4, 5, 6, 8], [4, 5, 7, 8], [4, 6, 7, 8]],
                       N_ELEMENTS=>9,
                       RANK=>4);
}

# @category Producing a matroid from scratch
# Configuration of the 13 points in the projective plane PG(2,3).
# @return Matroid
user_function pg23_matroid() {
    return new Matroid(BASES=>[[0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 1, 6], [0, 1, 7], [0, 1, 8], [0, 1, 9], [0, 1, 10], [0, 1, 11], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 2, 6], [0, 2, 7], [0, 2, 8], [0, 2, 9], [0, 2, 10], [0, 2, 11], [0, 3, 4], [0, 3, 5], [0, 3, 7], [0, 3, 8], [0, 3, 10], [0, 3, 11], [0, 3, 12], [0, 4, 5], [0, 4, 6], [0, 4, 7], [0, 4, 9], [0, 4, 11], [0, 4, 12], [0, 5, 6], [0, 5, 8], [0, 5, 9], [0, 5, 10], [0, 5, 12], [0, 6, 7], [0, 6, 8], [0, 6, 10], [0, 6, 11], [0, 6, 12], [0, 7, 8], [0, 7, 9], [0, 7, 10], [0, 7, 12], [0, 8, 9], [0, 8, 11], [0, 8, 12], [0, 9, 10], [0, 9, 11], [0, 9, 12], [0, 10, 11], [0, 10, 12], [0, 11, 12], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 2, 8], [1, 2, 9], [1, 2, 10], [1, 2, 11], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 3, 9], [1, 3, 10], [1, 3, 12], [1, 4, 5], [1, 4, 6], [1, 4, 8], [1, 4, 10], [1, 4, 11], [1, 4, 12], [1, 5, 7], [1, 5, 8], [1, 5, 9], [1, 5, 11], [1, 5, 12], [1, 6, 7], [1, 6, 8], [1, 6, 9], [1, 6, 11], [1, 6, 12], [1, 7, 8], [1, 7, 10], [1, 7, 11], [1, 7, 12], [1, 8, 9], [1, 8, 10], [1, 8, 12], [1, 9, 10], [1, 9, 11], [1, 9, 12], [1, 10, 11], [1, 10, 12], [1, 11, 12], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 8], [2, 3, 9], [2, 3, 11], [2, 3, 12], [2, 4, 5], [2, 4, 7], [2, 4, 8], [2, 4, 9], [2, 4, 10], [2, 4, 12], [2, 5, 6], [2, 5, 7], [2, 5, 10], [2, 5, 11], [2, 5, 12], [2, 6, 7], [2, 6, 8], [2, 6, 9], [2, 6, 10], [2, 6, 12], [2, 7, 8], [2, 7, 9], [2, 7, 11], [2, 7, 12], [2, 8, 10], [2, 8, 11], [2, 8, 12], [2, 9, 10], [2, 9, 11], [2, 9, 12], [2, 10, 11], [2, 10, 12], [2, 11, 12], [3, 4, 6], [3, 4, 7], [3, 4, 8], [3, 4, 9], [3, 4, 10], [3, 4, 11], [3, 5, 6], [3, 5, 7], [3, 5, 8], [3, 5, 9], [3, 5, 10], [3, 5, 11], [3, 6, 7], [3, 6, 8], [3, 6, 10], [3, 6, 11], [3, 6, 12], [3, 7, 8], [3, 7, 9], [3, 7, 11], [3, 7, 12], [3, 8, 9], [3, 8, 10], [3, 8, 12], [3, 9, 10], [3, 9, 11], [3, 9, 12], [3, 10, 11], [3, 10, 12], [3, 11, 12], [4, 5, 6], [4, 5, 7], [4, 5, 8], [4, 5, 9], [4, 5, 10], [4, 5, 11], [4, 6, 7], [4, 6, 8], [4, 6, 9], [4, 6, 10], [4, 6, 12], [4, 7, 8], [4, 7, 10], [4, 7, 11], [4, 7, 12], [4, 8, 9], [4, 8, 11], [4, 8, 12], [4, 9, 10], [4, 9, 11], [4, 9, 12], [4, 10, 11], [4, 10, 12], [4, 11, 12], [5, 6, 7], [5, 6, 8], [5, 6, 9], [5, 6, 11], [5, 6, 12], [5, 7, 8], [5, 7, 9], [5, 7, 10], [5, 7, 12], [5, 8, 10], [5, 8, 11], [5, 8, 12], [5, 9, 10], [5, 9, 11], [5, 9, 12], [5, 10, 11], [5, 10, 12], [5, 11, 12], [6, 7, 9], [6, 7, 10], [6, 7, 11], [6, 8, 9], [6, 8, 10], [6, 8, 11], [6, 9, 10], [6, 9, 11], [6, 9, 12], [6, 10, 11], [6, 10, 12], [6, 11, 12], [7, 8, 9], [7, 8, 10], [7, 8, 11], [7, 9, 10], [7, 9, 11], [7, 9, 12], [7, 10, 11], [7, 10, 12], [7, 11, 12], [8, 9, 10], [8, 9, 11], [8, 9, 12], [8, 10, 11], [8, 10, 12], [8, 11, 12]],
                       N_ELEMENTS=>13,
                       RANK=>3);
}

# @category Producing a matroid from scratch
# Produces many oxley matroids:
# [[ag23_matroid]], [[ag32_matroid]], [[ag32_prime_matroid]], [[f8_matroid]],
# [[j_matroid]], [[l8_matroid]], [[n1_matroid]], [[n2_matroid]], [[o7_matroid]], [[p7_matroid]],
# [[p8_matroid]], [[non_p8_matroid]], [[pappus_matroid]], [[non_pappus_matroid]], [[pg23_matroid]],
# [[q3_gf3_star_matroid]], [[q8_matroid]], [[r8_matroid]], [[r9a_matroid]], [[r9b_matroid]],
# [[r10_matroid]], [[t8_matroid]], [[vamos_matroid]], [[non_vamos_matroid]], [[wheel4_matroid]]
# @return Array<Matroid>
user_function oxley_matroids() {
    return new Array<Matroid>([
        ag23_matroid(),
        ag32_matroid(),
        ag32_prime_matroid(),
        f8_matroid(),
        j_matroid(),
        l8_matroid(),
        n1_matroid(),
        n2_matroid(),
        o7_matroid(),
        p7_matroid(),
        p8_matroid(),
        non_p8_matroid(),
        pappus_matroid(),
        non_pappus_matroid(),
        pg23_matroid(),
        q3_gf3_star_matroid(),
        q8_matroid(),
        r8_matroid(),
        r9a_matroid(),
        r9b_matroid(),
        r10_matroid(),
        t8_matroid(),
        vamos_matroid(),
        non_vamos_matroid(),
        wheel4_matroid()
                              ]);
}


# Local Variables:
# mode: perl
# cperl-indent-level: 3
# indent-tabs-mode:nil
# End:
